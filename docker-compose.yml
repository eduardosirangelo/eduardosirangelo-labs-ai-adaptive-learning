version: '3.8'
name: 'ai_adaptative_learning'

services:
    postgres:
        image: postgres:15-alpine
        environment:
            POSTGRES_USER: user
            POSTGRES_PASSWORD: pass
            POSTGRES_DB: appdb
        ports:
            - '5462:5432'
        volumes:
            - ./docker/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
            - pg_data:/var/lib/postgresql/data
        networks:
            - backend
    
    zookeeper:
        image: bitnami/zookeeper:latest
        environment:
            ALLOW_ANONYMOUS_LOGIN: 'yes'
        networks:
            - backend
    
    kafka:
        image: bitnami/kafka:latest
        depends_on:
            - zookeeper
        environment:
            - KAFKA_CFG_NODE_ID=0
            - KAFKA_CFG_PROCESS_ROLES=controller,broker
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        networks:
            - backend
    
    redis:
        image: redis:7-alpine
        ports:
            - '8379:6379'
        networks:
            - backend
            
    auth:
        build:
            context: ./services/auth
            dockerfile: Dockerfile
        environment:
            - ENV=development
            - PORT=9000
            - METRICS_PORT=9091
            - DATABASE_URL=postgres://user:pass@postgres:5432/contentdb
            - KAFKA_BROKERS=kafka:9092
            - READ_TIMEOUT=10s
            - REQUEST_TIMEOUT=10s
            - SHUTDOWN_TIMEOUT=15s
            - CORS_ORIGINS=*
            - RATE_LIMIT=1000
            - RATE_WINDOW=1m
            - COMPRESSION_LEVEL=5
            - LOG_LEVEL=INFO
            - TLS_CERT_PATH=/etc/ssl/certs/tls.crt
            - TLS_KEY_PATH=/etc/ssl/private/tls.key
            - JWKS_URL=https://auth.adaptive-learning.com/.well-known/jwks.json
            - LLM_API_URL=https://api.openai.com/v1/chat/completions
            - LLM_API_KEY=${LLM_API_KEY:-openai_api_key}
        ports:
            - '9000:9000'
        networks:
            - backend

    assessment-api:
        build:
            context: ./services/assessment-api
            dockerfile: Dockerfile
        environment:
            - ENV=development
            - PORT=8070
            - METRICS_PORT=9091
            - DATABASE_URL=postgres://user:pass@postgres:5432/contentdb
            - KAFKA_BROKERS=kafka:9092
            - READ_TIMEOUT=10s
            - REQUEST_TIMEOUT=10s
            - SHUTDOWN_TIMEOUT=15s
            - CORS_ORIGINS=*
            - RATE_LIMIT=1000
            - RATE_WINDOW=1m
            - COMPRESSION_LEVEL=5
            - LOG_LEVEL=INFO
            - TLS_CERT_PATH=/etc/ssl/certs/tls.crt
            - TLS_KEY_PATH=/etc/ssl/private/tls.key
            - JWKS_URL=https://auth.adaptive-learning.com/.well-known/jwks.json
            - LLM_API_URL=https://api.openai.com/v1/chat/completions
            - LLM_API_KEY=${LLM_API_KEY:-openai_api_key}
        ports:
            - '8070:8070'
        depends_on:
            - postgres
            - kafka
        networks:
            - backend
    
    content-engine:
        build:
            context: ./services/content-engine
            dockerfile: Dockerfile
        environment:
            - ENV=development
            - PORT=8071
            - METRICS_PORT=9091
            - DATABASE_URL=postgres://user:pass@postgres:5432/contentdb
            - KAFKA_BROKERS=kafka:9092
            - READ_TIMEOUT=10s
            - REQUEST_TIMEOUT=10s
            - SHUTDOWN_TIMEOUT=15s
            - CORS_ORIGINS=*
            - RATE_LIMIT=1000
            - RATE_WINDOW=1m
            - COMPRESSION_LEVEL=5
            - LOG_LEVEL=INFO
            - TLS_CERT_PATH=/etc/ssl/certs/tls.crt
            - TLS_KEY_PATH=/etc/ssl/private/tls.key
            - JWKS_URL=https://auth.adaptive-learning.com/.well-known/jwks.json
            - LLM_API_URL=https://api.openai.com/v1/chat/completions
            - LLM_API_KEY=${LLM_API_KEY:-openai_api_key}
        
        ports:
            - '8071:8071'
        depends_on:
            - postgres
            - kafka
        
        networks:
            - backend
    
    progress-tracker:
        build:
            context: ./services/progress-tracker
            dockerfile: Dockerfile
        environment:
            - ENV=development
            - PORT=8072
            - METRICS_PORT=9091
            - DATABASE_URL=postgres://user:pass@postgres:5432/contentdb
            - KAFKA_BROKERS=kafka:9092
            - READ_TIMEOUT=10s
            - REQUEST_TIMEOUT=10s
            - SHUTDOWN_TIMEOUT=15s
            - CORS_ORIGINS=*
            - RATE_LIMIT=1000
            - RATE_WINDOW=1m
            - COMPRESSION_LEVEL=5
            - LOG_LEVEL=INFO
            - TLS_CERT_PATH=/etc/ssl/certs/tls.crt
            - TLS_KEY_PATH=/etc/ssl/private/tls.key
            - JWKS_URL=https://auth.adaptive-learning.com/.well-known/jwks.json
            - LLM_API_URL=https://api.openai.com/v1/chat/completions
            - LLM_API_KEY=${LLM_API_KEY:-openai_api_key}
        ports:
            - '8072:8072'
        depends_on:
            - postgres
            - redis
        networks:
            - backend
    
#    web-app:
#        build:
#            context: ./ui/web-app
#        ports:
#            - '9090:4200'
#        networks:
#            - frontend
#        depends_on:
#            - content-engine
#            - assessment-api
#            - progress-tracker
#            - auth-service
#
#    mfe-dashboard:
#        build:
#            context: ./ui/mfe-dashboard
#            dockerfile: Dockerfile
#        ports:
#            - '9091:80'
#        networks:
#            - frontend

volumes:
    pg_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ${PWD}/docker/volumes/postgres-data

networks:
    backend:
    frontend:
